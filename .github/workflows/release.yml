name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Swift
      run: |
        echo "Using system Swift version:"
        swift --version
        
    - name: Build release
      run: |
        swift build -c release
        
    - name: Create app bundle
      run: |
        # Create app bundle structure
        mkdir -p PortManager.app/Contents/MacOS
        mkdir -p PortManager.app/Contents/Resources
        
        # Copy the binary
        cp .build/release/PortManager PortManager.app/Contents/MacOS/
        
        # Get version from tag or use default
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION="dev-$(date +%Y%m%d-%H%M%S)"
        fi
        
        # Create Info.plist with version
        cat > PortManager.app/Contents/Info.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleExecutable</key>
            <string>PortManager</string>
            <key>CFBundleIdentifier</key>
            <string>com.portmanager.app</string>
            <key>CFBundleName</key>
            <string>Port Manager</string>
            <key>CFBundleVersion</key>
            <string>$VERSION</string>
            <key>CFBundleShortVersionString</key>
            <string>$VERSION</string>
            <key>CFBundlePackageType</key>
            <string>APPL</string>
            <key>CFBundleSignature</key>
            <string>????</string>
            <key>LSMinimumSystemVersion</key>
            <string>14.0</string>
            <key>LSUIElement</key>
            <true/>
            <key>NSHighResolutionCapable</key>
            <true/>
            <key>NSPrincipalClass</key>
            <string>NSApplication</string>
        </dict>
        </plist>
        EOF
        
        # Create icon from SVG
        echo "Creating app icon..."
        mkdir -p icon.iconset
        
        # Convert SVG to PNG at 512x512
        if command -v rsvg-convert &> /dev/null; then
            rsvg-convert -w 512 -h 512 icon.svg -o icon.iconset/icon_512x512.png
        else
            # Fallback: use sips with a simple blue circle
            sips -s format png -z 512 512 --setProperty format png /System/Library/CoreServices/CoreTypes.bundle/Contents/Resources/GenericApplicationIcon.icns --out icon.iconset/icon_512x512.png > /dev/null 2>&1
        fi
        
        # Create different sizes
        sizes=(16 32 64 128 256 512)
        for size in "${sizes[@]}"; do
            sips -z $size $size icon.iconset/icon_512x512.png --out icon.iconset/icon_${size}x${size}.png > /dev/null 2>&1
            sips -z $((size*2)) $((size*2)) icon.iconset/icon_512x512.png --out icon.iconset/icon_${size}x${size}@2x.png > /dev/null 2>&1
        done
        
        # Convert to icns
        iconutil -c icns icon.iconset -o PortManager.app/Contents/Resources/AppIcon.icns > /dev/null 2>&1
        rm -rf icon.iconset
        
        # Make the app executable
        chmod +x PortManager.app/Contents/MacOS/PortManager
        
        # Create zip for distribution
        echo "Creating distribution zip..."
        zip -r PortManager-$VERSION.zip PortManager.app
        
        # Also create a generic zip for latest
        zip -r PortManager.zip PortManager.app
        
        echo "App bundle created successfully!"
        echo "Version: $VERSION"
        echo "Size: $(du -sh PortManager.app | cut -f1)"
        
    - name: Get version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=dev-$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT
        fi
        
    - name: List files for debugging
      run: |
        echo "Current directory contents:"
        ls -la
        echo "Checking if PortManager.zip exists:"
        ls -la PortManager.zip || echo "PortManager.zip not found"
        
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          PortManager.zip
        body: |
          ## Port Manager ${{ steps.version.outputs.VERSION }}
          
          A lightweight macOS menu bar application for managing open ports.
          
          ### Features
          - üñ•Ô∏è Menu bar integration with simple "P" icon
          - üîç Port scanning using `lsof`
          - üìä Services grouped by name with port counts
          - ‚ö° One-click process termination
          - üíæ Memory optimized (~2-5MB idle)
          - üîí Single instance enforcement
          
          ### Installation
          1. Download `PortManager.zip`
          2. Extract the `PortManager.app` file
          3. Drag to Applications folder
          4. Double-click to run
          5. Look for "P" icon in menu bar
          
          ### Requirements
          - macOS 14.0 or later
          
          ### First Run
          You may need to right-click and "Open" the first time due to macOS security.
          
          ### Building from Source
          ```bash
          git clone https://github.com/${{ github.repository }}
          cd free-ports
          swift run PortManager
          ```
          
          ---
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ github.event.before }}...${{ github.event.after }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload Artifacts
      if: github.event_name == 'workflow_dispatch'
      uses: actions/upload-artifact@v4
      with:
        name: PortManager-${{ steps.version.outputs.VERSION }}
        path: PortManager.zip
